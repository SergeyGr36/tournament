plugins {
    id 'java'
    id "io.spring.dependency-management" version "1.0.10.RELEASE"
    id 'jacoco'
}

ext{
    springBootVersion = '2.3.2.RELEASE'
    mapstructVersion = '1.3.1.Final'
    lombokVersion = '1.18.12'
    boot = [
            starterWeb: "org.springframework.boot:spring-boot-starter-web:$springBootVersion",
            starterData: "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion",
            configurationProcessor: "org.springframework.boot:spring-boot-configuration-processor:$springBootVersion"
    ]
    utils = [
            mapstruct:"org.mapstruct:mapstruct:$mapstructVersion",
            mapstructProcessor:"org.mapstruct:mapstruct-processor:$mapstructVersion",
            lombok: "org.projectlombok:lombok:$lombokVersion"
    ]
}

group 'test.task'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

test {
    useJUnitPlatform {
        excludeTags 'slow'
        includeEngines 'junit-jupiter'
    }
    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
    }
    failFast = false
}

dependencies {
    implementation boot.starterData
    implementation boot.starterWeb
    implementation boot.configurationProcessor

    implementation 'org.hibernate:hibernate-validator:6.1.5.Final'


    annotationProcessor utils.lombok
    compileOnly utils.lombok
    testCompileOnly utils.lombok

    testImplementation 'org.junit.jupiter:junit-jupiter:5.6.2'

    testImplementation 'com.h2database:h2:1.4.200'
    implementation 'com.h2database:h2:1.4.200'

    implementation utils.mapstruct
    annotationProcessor  utils.mapstructProcessor
    testAnnotationProcessor utils.mapstructProcessor
}

    jacoco {
        toolVersion = '0.8.5'
    }
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.3
            }
        }
        rule {
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 0.3
            }
        }
        rule {
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.3
            }
        }
    }
}
jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}
wrapper{
    version = "6.5"
}